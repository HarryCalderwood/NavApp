{/*children={createHomeStack}/*} - to replace Home component in App.js Drawer Navigator.

            
            //Buttons within Home.js. 
            <Button
                title='Go to Feed Item'
                onPress={() => this.props.navigation.navigate('Detail', {screenName: "My Detail Screen"})}
                />  
                  <Button
                title='Map'
                onPress={() => this.props.navigation.navigate('Settings', {screenName: "Settings"})}
                />  
                   <Button
                title='Briefing'
                onPress={() => this.props.navigation.navigate('Briefing', {screenName: "Briefing"})}
                />     

<MaterialBottomTabs.Navigator>
                <MaterialBottomTabs.Screen name = "Saved" component= {Home}/>
                <MaterialBottomTabs.Screen name = "Commute" component= {Home}/>
                <MaterialBottomTabs.Screen name = "Create new location" component= {Home}/>
                <MaterialBottomTabs.Screen name = "Settings" component= {Settings}/>
                <MaterialBottomTabs.Screen name = "Briefing" component= {Briefing}/>
                </MaterialBottomTabs.Navigator>

 "config": {
          "googleMaps": {
            "apiKey": ""
          }
        }

             "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#FFFFFF"   
      },   
      
               <Text style={styles.title}>Desk Officer App</Text>


Drawer Navigator Code base:

App.js: 
<Drawer.Navigator drawerStyle={{
                     backgroundColor: 'black',
                     width: 200,
                }} drawerContentOptions={{
                    activeTintColor: '#D2D2D2',
                    inactiveTintColor: 'white',
                    itemStyle: { marginVertical: 5 },
                  }}
                  
                 >
                    <Drawer.Screen name="Login" children={createLoginStack}/> 
                    <Drawer.Screen name="Map" children={createBottomTabs}/> 
                    <Drawer.Screen name="Briefing" component={Briefing}/>
                    <Drawer.Screen name="Settings" component={Settings}/>
                    <Drawer.Screen name="Logout" component={Logout}/>
                    </Drawer.Navigator>


  createLoginStack = () =>
        <Stack.Navigator>
            <Stack.Screen
            name ="Login" 
            component= {Login}/>
             <Stack.Screen
            name ="Home" 
            children={createBottomTabs}
            />
             <Stack.Screen 
            name ="Settings" 
            component= {Settings} 
            options={{
                title: "Settings",
                headerStyle: {backgroundColor: "black"},
                headerTintColor: "white"
            }}/>

        </Stack.Navigator>



        <Stack.Navigator>
            <Stack.Screen 
            name ="Login" 
            component= {Login} 
            options={{
                title: "Desk Officer App",
                headerStyle: {backgroundColor: "black"},
                headerTintColor: "white"
            }}
            />
            <Stack.Screen 
            name ="Home" 
            component= {createBottomTabs} 
            options={{
                title: "Map",
                headerStyle: {backgroundColor: "black"},
                headerTintColor: "white"
            }}/>
              <Stack.Screen 
            name ="Settings" 
            component= {Settings} 
            options={{
                title: "Settings",
                headerStyle: {backgroundColor: "black"},
                headerTintColor: "white"
            }}/>
              <Stack.Screen 
            name ="Briefing" 
            component= {Briefing} 
            options={{
                title: "Briefing",
                headerStyle: {backgroundColor: "black"},
                headerTintColor: "white"
            }}/>

            <Stack.Screen name ="Bottom Tabs" children= {createBottomTabs} />
            <Stack.Screen name ="Top Tabs" children= {createTopTabs} />
        </Stack.Navigator> 

         initialRegion={{
            latitude: 	54.583116,
            longitude: 	-5.786278,
            latitudeDelta: 0.015,
            longitudeDelta: 0.0121
        }}

        const [region, setRegion] = useState({
        latitude: 51.5079145,
        longitude: -0.0899163,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01
      });

      const Berlin = {
        latitude: 52.5200066,
        longitude: 13.404954
      };
    
      const Frankfurt = {
        latitude: 50.1109221,
        longitude: 8.6821267
      };



  region={region}
        onRegionChangeComplete={region => setRegion(region)}



        
    const getDirections = async (startLoc, destinationLoc) => {
        try {
          const KEY = "AIzaSyAW9tExu5mTcWMUMMNMoNJ1L8snwp0nHGw";
          let resp = await fetch(
            `https://maps.googleapis.com/maps/api/directions/json?origin=${startLoc}&destination=${destinationLoc}&key=${KEY}`
          );
          let respJson = await resp.json();
          let points = decode(respJson.routes[0].overview_polyline.points);
          console.log(points);
          let coords = points.map((point, index) => {
            return {
              latitude: point[0],
              longitude: point[1]
            };
          });
          return coords;
        } catch (error) {
          return error;
        }
      };


          const [region, setRegion] = useState({
        latitude: 51.5079145,
        longitude: -0.0899163,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01
      });

    const [coords, setCoords] = useState([]);
    
    useEffect(() => {
        getDirections("52.5200066,13.404954", "50.1109221,8.6821267")
          .then(coords => setCoords(coords))
          .catch(err => console.log("Something went wrong"));
      }, []);
    
    
    return (
       
      <MapView
        provider={PROVIDER_GOOGLE}
        style={styles.map}
        showsUserLocation
        followsUserLocation  
        >
        
            <Marker coordinate={{ latitude: 51.5078788, longitude: -0.0877321 }} 
            pinColor="black"
            />
             {coords.length > 0 && <Polyline coordinates={coords} />}
            </MapView>
    )
}


const styles = StyleSheet.create ({
    map: {
     height  
    }
})


{coords.length > 0 && <Polyline coordinates={coords} />}



   region={region}
        onRegionChangeComplete={region => setRegion(region)}


            const getDirections = async (startLoc, destinationLoc) => {
        try {
          const KEY = "AIzaSyAW9tExu5mTcWMUMMNMoNJ1L8snwp0nHGw";
          let resp = await fetch(
            `https://maps.googleapis.com/maps/api/directions/json?origin=${startLoc}&destination=${destinationLoc}&key=${KEY}`
          );
          let respJson = await resp.json();
          let points = decode(respJson.routes[0].overview_polyline.points);
          console.log(points);
          let coords = points.map((point, index) => {
            return {
              latitude: point[0],
              longitude: point[1]
            };
          });
          return coords;
        } catch (error) {
          return error;
        }
      };


          const [region, setRegion] = useState({
        latitude: 51.5079145,
        longitude: -0.0899163,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01
      });

    const [coords, setCoords] = useState([]);
    
    useEffect(() => {
        getDirections("52.5200066,13.404954", "50.1109221,8.6821267")
          .then(coords => setCoords(coords))
          .catch(err => console.log("Something went wrong"));
      }, []);
    

--------------------------------------------
    
  locateCurrentLocation = () => {
    Geolocation.getCurrentPosition(
      position => {
        console.log(JSON.stringify(position));
      }
    )
  }

    state = {
    location: {},
    errorMessage: ''
  };


  
componentWillMount() {
  this._getLocation();
}
  _getLocation = async () => {
    const {status} = await Permissions.askAsync(Permissions.LOCATION);

    if(status !== 'granted') {
      console.log('PERMISSION NOT GRANTED!');

      this.setState({
        errorMessage: 'PERMISSION NOT GRANTED'

      })
    }

    const location = await Location.getCurrentPositionAsync();

    this.setState ({
      location
    })
  }



  async componentDidMount () {
    const {status} = await Permissions.getAsync(Permissions.LOCATION)
    
    if(status!== 'granted'){
      const response = await Permissions.askAsync(Permissions.LOCATION)
    }  
    navigator.geoloaction.getCurrentPosition(

    ({coords: {userLatitude, userLongitude} }) => this.setState([userLatitude, userLongitude]),
    (error) => console.log('Error:', error)
      )
    
  }




  render() {
    const {userLatitude, userLongitude } = this.state

  userLatitude: {},
        userLongitude: {}



      <MapView.Marker
          draggable
          title="Belfast City Hall"
          description="Historic meeting place. Over 200 year old building."
          coordinate={{
            latitude: 54.59658111383503,
            longitude: -5.929401353654955
          }}>

            
        </MapView.Marker>





        <Carousel
        ref={(c) => { this._carousel = c; }}
        data={this.state.coordinates}
        containerCustomStyle={styles.carousel}
        renderItem={this.renderCarouselItem}
        sliderWidth={Dimensions.get('window').width}
        itemWidth={300}
        itemHeight={200}
        onSnapToItem={(index) => this.onCarouselItemChange(index)}
      />